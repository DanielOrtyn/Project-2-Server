package com.revature.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.revature.model.Bid;
import com.revature.model.SaleItem;
import com.revature.model.User;
import com.revature.repository.BidRepo;
import com.revature.repository.SaleItemRepo;

@Service
public class BidService {
	@Autowired
	private BidRepo bidRepo;
	@Autowired
	private SaleItemRepo saleItemRepo;

	public List<Bid> findAll() {
		return bidRepo.findAll();
	}

	public Optional<Bid> findById(long id) {
		return bidRepo.findById(id);
	}

	public ResponseEntity<Bid> save(Bid b) {
		List<Bid> previousBids = bidRepo.findUsingBidderAndSaleItem(
				b.getSaleItemId(), b.getBidder());
		// Resolve conflict with earlier bids
		if (previousBids.size() > 1) {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		if (previousBids.size() == 1) {
			Bid previousBid = previousBids.get(0);
			previousBid.setMaxBidPrice(b.getMaxBidPrice());
			b = previousBid;
		}
		else {
			b = bidRepo.save(b);
		}
		

		Optional<SaleItem> itemSale = saleItemRepo.findById(b.getSaleItemId());
		if (itemSale.isPresent()) {
			Bid currentSaleBid = itemSale.get().getCurrentBid();

			// check if bid already exists
			// and therefore have been delt with via resolution of earlier bids
			if (currentSaleBid.getBidId() == b.getBidId()) {
				return new ResponseEntity<>(currentSaleBid,HttpStatus.OK);
			}
			
			// determine winning bid
			if (currentSaleBid.getMaxBidPrice() >= b.getMaxBidPrice()) {
				currentSaleBid.setMaxBidPrice(b.getMaxBidPrice());
				b.setMaxBidPrice(b.getMaxBidPrice());
				return new ResponseEntity<>(b, HttpStatus.OK);
			} else {
				currentSaleBid.setMaxBidPrice(currentSaleBid.getMaxBidPrice());
				b.setMaxBidPrice(currentSaleBid.getMaxBidPrice()+1);
				itemSale.get().setCurrentBid(b);
				return new ResponseEntity<>(b, HttpStatus.OK);
			}
		}
		return null;
	}

	public List<Bid> findByBidder(User bidder) {
		return bidRepo.findByBidder(bidder);
	}
}
