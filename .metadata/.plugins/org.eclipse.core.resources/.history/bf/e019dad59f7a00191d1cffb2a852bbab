package com.revature.controllers;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.revature.model.Category;
import com.revature.model.SaleItem;
import com.revature.model.User;
import com.revature.model.requestbody.CategoryAndTextSearch;
import com.revature.service.SaleItemService;

@RestController
@RequestMapping("SaleItem")
public class SaleItemController {

	@Autowired
	private SaleItemService saleItemService;

	@GetMapping("id/{id}")
	public SaleItem findByIdTitle(@PathVariable long id) {
		return saleItemService.findById(id);
	}

	@GetMapping()
	public List<SaleItem> findAll() {
		return saleItemService.findAll();
	}

	@GetMapping("title/{title}")
	public List<SaleItem> findByTitle(@PathVariable String title) {
		return saleItemService.findByTitle(title);
	}

	@PostMapping("seller")
	public ResponseEntity<List<SaleItem>> findBySeller(@RequestBody User seller,
			HttpServletRequest req) {
		User currentUser = (User) req.getSession().getAttribute("user");
		if (currentUser == null
				|| (currentUser.getUserId() != seller.getUserId())) {
			return new ResponseEntity<>(HttpStatus.FORBIDDEN);
		}
		return new ResponseEntity<>(saleItemService.findBySeller(seller),
				HttpStatus.OK);
	}

	@GetMapping("price/lowPrice/{lowPrice}/highPrice/{highPrice}")
	public List<SaleItem> findByItemsSellingForRange(
			@PathVariable double lowPrice, @PathVariable double highPrice) {
		return saleItemService.findByItemsSellingForRange(lowPrice, highPrice);
	}

	@GetMapping("price/lowPrice/{lowPrice}")
	public List<SaleItem> findByItemsSellingForMoreThen(
			@PathVariable double lowPrice) {
		return saleItemService.findByItemsSellingForMoreThen(lowPrice);
	}

	@GetMapping("price/highPrice/{highPrice}")
	public List<SaleItem> findByItemsSellingForLessThen(
			@PathVariable double highPrice) {
		return saleItemService.findByItemsSellingForLessThen(highPrice);
	}

	@PostMapping("search/category")
	public List<SaleItem> findByCategory(@RequestBody Category category) {
		return saleItemService.findByCategory(category);
	}

	@PostMapping("search/text")
	public List<SaleItem> findByText(
			@RequestBody CategoryAndTextSearch searchItems) {
		System.out.println(searchItems.searchString);
		return saleItemService.findByTextSearch(searchItems.searchString);
	}

	@PostMapping("search/category/text")
	public List<SaleItem> findByCategoryAndInText(
			@RequestBody CategoryAndTextSearch searchItems) {

		List<SaleItem> saleList;
		if (searchItems.searchString.length() == 0) {
			saleList = saleItemService.findByCategory(searchItems.category);
		} else {
			saleList = saleItemService.findByCategoryAndTextSearch(
					searchItems.category, searchItems.searchString);
		}

		return saleList;
	}

	@PostMapping("search/active/category")
	public List<SaleItem> findActiveByCategory(@RequestBody Category category) {
		return saleItemService.findActiveByCategory(category);
	}

	@GetMapping("search/active/")
	public List<SaleItem> findActive() {
		return this.findActiveByText("");
	}

	@GetMapping("search/active/text/{searchString}")
	public List<SaleItem> findActiveByText(@PathVariable String searchString) {
		System.out.println(searchString);
		return saleItemService.findActiveByTextSearch(searchString);
	}

	@PostMapping("search/active/category/text")
	public List<SaleItem> findActiveByCategoryAndInText(
			@RequestBody CategoryAndTextSearch searchItems) {

		List<SaleItem> saleList;
		if (searchItems.searchString.length() == 0) {
			saleList = saleItemService
					.findActiveByCategory(searchItems.category);
		} else {
			saleList = saleItemService.findActiveByCategoryAndTextSearch(
					searchItems.category, searchItems.searchString);
		}

		return saleList;
	}

	@GetMapping("saleEndDate/startDate/{startDate}/endDate/{endDate}")
	public List<SaleItem> findByItemsWithEndDateRange(
			@PathVariable long startDate, @PathVariable long endDate) {
		return saleItemService.findByItemsWithEndDateRange(startDate, endDate);
	}

	@GetMapping("saleEndDate/startDate/{startDate}")
	public List<SaleItem> findByItemsWithEndDateAfter(
			@PathVariable long startDate) {
		return saleItemService.findByItemsWithEndDateAfter(startDate);
	}

	@GetMapping("saleEndDate/endDate/{endDate}")
	public List<SaleItem> findByItemsWithEndDateBefore(
			@PathVariable long endDate) {
		return saleItemService.findByItemsWithEndDateBefore(endDate);
	}

	@PostMapping()
	@Transactional
	public SaleItem createSaleItem(@RequestBody SaleItem saleItem,
			HttpServletRequest req) {
		User currentUser = (User) req.getSession().getAttribute("user");
		saleItem.setSeller(currentUser);
		return saleItemService.createSaleItem(saleItem, currentUser);
	}

	@PatchMapping()
	@Transactional
	public ResponseEntity<SaleItem> updateSaleItem(@RequestBody SaleItem saleItem,
			HttpServletRequest req) {
		User currentUser = (User) req.getSession().getAttribute("user");
		if(currentUser==null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		return saleItemService.updateSaleItem(saleItem, currentUser);
	}

	@GetMapping("topPriced/{itemCount}")
	public List<List<SaleItem>> findByItemsWithEndDateBefore(
			@PathVariable int itemCount) {
		return saleItemService.findByTopPriceItemByCategoryItems(itemCount);
	}
	@GetMapping("getSendTo/{value}")
	public List<SaleItem> findByItemsEndedwithAltered(@PathVariable boolean value){
		List<SaleItem> askedFor = saleItemService.findByItemsEndedwithAltered(new Date().getTime(), value);
		return askedFor;
	}
	@PostMapping("serverUpdate/{key}")
	public SaleItem serverUpdateSaleItem(@RequestBody SaleItem saleItem, @PathVariable String key) {
		if(key.equals("kjfndfnalsdflasdnflknq81483Noifhwkdafqrnkandsfknf"))return saleItemService.serverUpdateItem(saleItem);
		else {
			return null;
		}
	}
	
	
}
